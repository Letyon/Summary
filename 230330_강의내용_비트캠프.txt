2023-03-30 3일차 강의일지

<자바 교재>
이것이 자바다
혼자 공부하는 자바
점프 투 자바
자바의 정석

<이동 연산자>
(<< 숫자) = * 2^숫자
(>> 숫자) = / 2^숫자

& = 양쪽 항이 모두 true면, true 반환
| =  한쪽 항만 true여도, true 반환
&& = 왼쪽 항이 false면, 자동 false 반환
|| = 왼쪽 항이 true면, 자동 true 반환

비트곱(&, and) = 양쪽 모두 1인 경우, 1로 반환
비트합(|, or) = 한쪽/양쪽 1인 경우, 1로 반환
배타적 논리합(^, xor) = 서로 다른 경우, 1로 반환

대입 연산자 = 우항을 먼저 계산한 후, 계산한 값 좌항 변수에 대입
확장 대입 연산자 = 연산 결과 값, 변수에 즉시 저장

<성능을 위한 코드 작성>
1클럭 = 1초에 1회 8byte 메모리 스캔
3.2ghz 클럭 = 1초에 32억회 8byte 메모리 스캔

<삼항 연산자>
(조건식 ? 연산식1 : 연산식2)
-> 참인 경우 연산식1 반환 / 거짓인 경우 연산식2 반환

<배열> = 같은 데이터 타입 변수를 여러 개 선언하여 저장하기 위함
1. 배열 선언 = int a[] or int[] a (같은 자료형끼리 하나의 배열에 담을 수 있음)
(stack에서 배열변수 생성)
(배열변수 = 배열주소를 담은 변수)

2. 배열 생성 = 크기 지정(크기 세팅 후 조정 불가)
-> (new로 heap에 데이터 먼저 생성)
-> (heap에 있는 데이터를 담은 주소 생성)
-> (heap에 있는 주소를 stack에 있는 배열변수에 저장)

3. 배열 확인 = Arrays.toString(배열변수);
(한눈에 문자열 형태 확인 가능)

4. 배열 길이 확인 = 변수명.length

5. 배열 선언과 생성 동시에 int[] a = new int[5]
0, 0, 0, 0, 0
6. 배열 선언과 초기화 동시에 int[] a = {0, 0, 0, 0, 0}
0, 0, 0, 0, 0

<제어문>
- 코드를 차례대로 실행하기도 하지만,
-> 조건문(선택적으로 실행)
-> 반복문(반복해서 실행)
가능

Math.random()은 호출 위치에 0 < x < 1인 난수 x를 가져옴

n+1을 해야 n까지 나옴
난수 범위(0 < 0.0xxxx ~ 0.9xxxx < 1)

ex)
난수 * 5 (0 ~ 4)
난수 * 10 (0 ~ 9)
난수 * 11 (0 ~ 10)
난수 * 101 (0 ~ 100)

블록 안 = {} 중괄호 안
분기문 = a나 b중 하나를 선택

<random 난수 과제>
// (int)math.random()*11인 상태는 (int)가 앞에 (난수)에 먼저 적용되어 0이 되므로, 뒤에 11을 곱하더라도 0값만 도출
// (int)(math.random()*11)인 상태는 (int)가 (난수*11)을 정수화하여, 0~10값이 도출

if = case 1
else if = case 2, 3, 4...
else = 나머지 case

좁은 범위에서(if문) -> 넓은 범위로(else if문)
if = case 1 (가장 먼저 체크)
else if = case 2, 3, 4... (2, 3, 4순서로 체크)
else = 나머지 case (마지막 체크)

case문 뒤에 사용되는 값은 변수를 사용할 수 없고, 반드시 상수를 사용해야 합니다.

(위에 변수로 선언된 값이 정수면)
switch(정수형 변수)
case문 뒤에 사용되는 값은 정수(상수)로 작성

(위에 변수로 선언된 값이 문자열이면)
switch(문자열형 변수)
case문 뒤에 사용되는 값은 문자열(상수)로 작성

<일반 merge = 브랜치 두 개가 같아짐>
(현재 브랜치 = 현재 체크아웃 중인 브랜치)에서
feature;a -> master로 병합(feature;a에서 master 기능을 가져옴)

<fast-forward merge = 브랜치 두 개가 차이가 있음>


